{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport { doc, getDoc, getFirestore, updateDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA7ZtxzONuN2ZbVnV5rjn1DtcEBrb7aHOM\",\n  authDomain: \"portfolio-43d1b.firebaseapp.com\",\n  projectId: \"portfolio-43d1b\",\n  storageBucket: \"portfolio-43d1b.appspot.com\",\n  messagingSenderId: \"5996957596\",\n  appId: \"1:5996957596:web:9f2b0ad9b391c301b08259\",\n  measurementId: \"G-WPKYEZ6B6T\"\n};\n/* if (!firebase.apps.length) firebase.initializeApp(firebaseConfig);\nelse firebase.app(); */\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore();\nexport { db };\n/* const db = firebase.firestore();\nconst auth = firebase.auth(); */\n\nexport const fetchData = async () => {\n  /*  return db\n    .collection(\"data\")\n    .doc(\"atyNgtYGT2tbctbC1FEh\")\n    .get()\n    .then((e) => e.data() as Profile); */\n  const docRef = doc(db, \"data\", \"atyNgtYGT2tbctbC1FEh\");\n  const docSnap = await getDoc(docRef);\n\n  if (docSnap.exists()) {\n    return docSnap.data();\n  } else {\n    // doc.data() will be undefined in this case\n    console.log(\"No such document!\");\n  }\n};\nexport const addToDB = async data => {\n  const washingtonRef = doc(db, \"cities\", \"DC\"); // Set the \"capital\" field of the city 'DC'\n\n  await updateDoc(washingtonRef, {\n    capital: true\n  });\n};\n/* export const sendEmail = async (\n  replyTo: string,\n  name: string,\n  message: string,\n  setEmailStatus: React.Dispatch<\n    React.SetStateAction<\"non-initiated\" | \"error\" | \"success\">\n  >\n) => {\n  console.log(replyTo, name, message);\n  return db\n    .collection(\"mail\")\n    .add({\n      to: \"daniel@friedebold.net\",\n      message: {\n        replyTo: replyTo,\n        subject: `Request by ${name}`,\n        text: message,\n      },\n    })\n    .then(() => setEmailStatus(\"success\"))\n    .catch((error) => setEmailStatus(\"error\"));\n}; */\n//Analytics\n\n/* export const loginUser = async (email: string, password: string) => {\n  auth.signInWithEmailAndPassword(email, password).catch((error) => {\n    var errorCode = error.code;\n\n    if (\n      errorCode === \"auth/wrong-password\" ||\n      errorCode === \"auth/invalid-email\"\n    ) {\n      console.log(\"credentials true\");\n    } else {\n      console.log(errorCode);\n    }\n  });\n};\n\nexport const fetchAnalytics = async (\n  setAnalyticsData: React.Dispatch<React.SetStateAction<PageView[]>>\n) => {\n  const query = db.collection(\"analytics\").orderBy(\"timestamp\", \"desc\");\n  query.onSnapshot(\n    (querySnapshot) => {\n      const analyticsData: PageView[] = [];\n      querySnapshot.forEach((doc) => {\n        analyticsData.push(doc.data() as PageView);\n      });\n      setAnalyticsData(analyticsData);\n    },\n    (err) => {\n      console.log(`Encountered error: ${err}`);\n    }\n  );\n};\n\nexport const stopFetchingAnalytics = async () => {\n  const unsub = db.collection(\"analytics\").onSnapshot(() => {});\n  unsub();\n};\n\nexport const addAnalytics = async (\n  location: ClientLocation,\n  windowDimensions: Dimensions,\n  timestamp: Date,\n  setFirebaseDocId: React.Dispatch<SetStateAction<string>>\n) => {\n  const ref = db.collection(\"analytics\").doc();\n  return db\n    .collection(\"analytics\")\n    .doc(`${ref.id}`)\n    .set({\n      location: location,\n      dimensions: windowDimensions,\n      timestamp: timestamp,\n      viewed: [],\n    })\n    .then(() => setFirebaseDocId(ref.id))\n    .catch((error) => console.log(\"error\"));\n};\n\nexport const addContactAnalytics = async (\n  refId: string,\n  viewedPage: string\n) => {\n  const timestamp = new Date();\n  return db\n    .collection(\"analytics\")\n    .doc(`${refId}`)\n    .set(\n      {\n        viewed: firebase.firestore.FieldValue.arrayUnion({\n          item: viewedPage,\n          timestamp: timestamp,\n        }),\n      },\n      { merge: true }\n    )\n    .then(() => console.log(\"success\"))\n    .catch((error) => console.log(\"error\"));\n}; */","map":{"version":3,"sources":["/Users/friedebold/dev/potfolio/src/apis/firebaseApi.ts"],"names":["initializeApp","doc","getDoc","getFirestore","updateDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","fetchData","docRef","docSnap","exists","data","console","log","addToDB","washingtonRef","capital"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,YAAtB,EAAoCC,SAApC,QAAqD,oBAArD;AAGA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,iCAFS;AAGrBC,EAAAA,SAAS,EAAE,iBAHU;AAIrBC,EAAAA,aAAa,EAAE,6BAJM;AAKrBC,EAAAA,iBAAiB,EAAE,YALE;AAMrBC,EAAAA,KAAK,EAAE,yCANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB;AASA;AACA;;AAEA,MAAMC,GAAG,GAAGb,aAAa,CAACK,cAAD,CAAzB;AAEA,MAAMS,EAAE,GAAGX,YAAY,EAAvB;AAEA,SAASW,EAAT;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAG,YAAY;AACnC;AACF;AACA;AACA;AACA;AAEE,QAAMC,MAAM,GAAGf,GAAG,CAACa,EAAD,EAAK,MAAL,EAAa,sBAAb,CAAlB;AACA,QAAMG,OAAO,GAAG,MAAMf,MAAM,CAACc,MAAD,CAA5B;;AAEA,MAAIC,OAAO,CAACC,MAAR,EAAJ,EAAsB;AACpB,WAAOD,OAAO,CAACE,IAAR,EAAP;AACD,GAFD,MAEO;AACL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AACF,CAhBM;AAkBP,OAAO,MAAMC,OAAO,GAAG,MAAOH,IAAP,IAAqB;AAC1C,QAAMI,aAAa,GAAGtB,GAAG,CAACa,EAAD,EAAK,QAAL,EAAe,IAAf,CAAzB,CAD0C,CAG1C;;AACA,QAAMV,SAAS,CAACmB,aAAD,EAAgB;AAC7BC,IAAAA,OAAO,EAAE;AADoB,GAAhB,CAAf;AAGD,CAPM;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport { doc, getDoc, getFirestore, updateDoc } from \"firebase/firestore\";\nimport { Profile } from \"./model\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA7ZtxzONuN2ZbVnV5rjn1DtcEBrb7aHOM\",\n  authDomain: \"portfolio-43d1b.firebaseapp.com\",\n  projectId: \"portfolio-43d1b\",\n  storageBucket: \"portfolio-43d1b.appspot.com\",\n  messagingSenderId: \"5996957596\",\n  appId: \"1:5996957596:web:9f2b0ad9b391c301b08259\",\n  measurementId: \"G-WPKYEZ6B6T\",\n};\n/* if (!firebase.apps.length) firebase.initializeApp(firebaseConfig);\nelse firebase.app(); */\n\nconst app = initializeApp(firebaseConfig);\n\nconst db = getFirestore();\n\nexport { db };\n/* const db = firebase.firestore();\nconst auth = firebase.auth(); */\n\nexport const fetchData = async () => {\n  /*  return db\n    .collection(\"data\")\n    .doc(\"atyNgtYGT2tbctbC1FEh\")\n    .get()\n    .then((e) => e.data() as Profile); */\n\n  const docRef = doc(db, \"data\", \"atyNgtYGT2tbctbC1FEh\");\n  const docSnap = await getDoc(docRef);\n\n  if (docSnap.exists()) {\n    return docSnap.data() as Profile;\n  } else {\n    // doc.data() will be undefined in this case\n    console.log(\"No such document!\");\n  }\n};\n\nexport const addToDB = async (data: any) => {\n  const washingtonRef = doc(db, \"cities\", \"DC\");\n\n  // Set the \"capital\" field of the city 'DC'\n  await updateDoc(washingtonRef, {\n    capital: true,\n  });\n};\n\n/* export const sendEmail = async (\n  replyTo: string,\n  name: string,\n  message: string,\n  setEmailStatus: React.Dispatch<\n    React.SetStateAction<\"non-initiated\" | \"error\" | \"success\">\n  >\n) => {\n  console.log(replyTo, name, message);\n  return db\n    .collection(\"mail\")\n    .add({\n      to: \"daniel@friedebold.net\",\n      message: {\n        replyTo: replyTo,\n        subject: `Request by ${name}`,\n        text: message,\n      },\n    })\n    .then(() => setEmailStatus(\"success\"))\n    .catch((error) => setEmailStatus(\"error\"));\n}; */\n\n//Analytics\n\n/* export const loginUser = async (email: string, password: string) => {\n  auth.signInWithEmailAndPassword(email, password).catch((error) => {\n    var errorCode = error.code;\n\n    if (\n      errorCode === \"auth/wrong-password\" ||\n      errorCode === \"auth/invalid-email\"\n    ) {\n      console.log(\"credentials true\");\n    } else {\n      console.log(errorCode);\n    }\n  });\n};\n\nexport const fetchAnalytics = async (\n  setAnalyticsData: React.Dispatch<React.SetStateAction<PageView[]>>\n) => {\n  const query = db.collection(\"analytics\").orderBy(\"timestamp\", \"desc\");\n  query.onSnapshot(\n    (querySnapshot) => {\n      const analyticsData: PageView[] = [];\n      querySnapshot.forEach((doc) => {\n        analyticsData.push(doc.data() as PageView);\n      });\n      setAnalyticsData(analyticsData);\n    },\n    (err) => {\n      console.log(`Encountered error: ${err}`);\n    }\n  );\n};\n\nexport const stopFetchingAnalytics = async () => {\n  const unsub = db.collection(\"analytics\").onSnapshot(() => {});\n  unsub();\n};\n\nexport const addAnalytics = async (\n  location: ClientLocation,\n  windowDimensions: Dimensions,\n  timestamp: Date,\n  setFirebaseDocId: React.Dispatch<SetStateAction<string>>\n) => {\n  const ref = db.collection(\"analytics\").doc();\n  return db\n    .collection(\"analytics\")\n    .doc(`${ref.id}`)\n    .set({\n      location: location,\n      dimensions: windowDimensions,\n      timestamp: timestamp,\n      viewed: [],\n    })\n    .then(() => setFirebaseDocId(ref.id))\n    .catch((error) => console.log(\"error\"));\n};\n\nexport const addContactAnalytics = async (\n  refId: string,\n  viewedPage: string\n) => {\n  const timestamp = new Date();\n  return db\n    .collection(\"analytics\")\n    .doc(`${refId}`)\n    .set(\n      {\n        viewed: firebase.firestore.FieldValue.arrayUnion({\n          item: viewedPage,\n          timestamp: timestamp,\n        }),\n      },\n      { merge: true }\n    )\n    .then(() => console.log(\"success\"))\n    .catch((error) => console.log(\"error\"));\n}; */\n"]},"metadata":{},"sourceType":"module"}