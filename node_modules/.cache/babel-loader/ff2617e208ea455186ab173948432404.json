{"ast":null,"code":"var _jsxFileName = \"/Users/friedebold/dev/potfolio/src/components/Timeline/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Decoration from './Decoration';\nimport OpenExperience from './OpenExperience';\nimport StringSvg from './StringSvg';\nimport './timeline.css';\nimport TimeSvg from './TimeSvg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timeline = ({\n  timeline\n}) => {\n  _s();\n\n  const [xpId, setXpId] = useState(-1);\n  const [showNote, setShowNote] = useState(true);\n  /* DISABLE NOTE WHEN TIMELINE CLICKED */\n\n  useEffect(() => {\n    if (showNote && xpId !== -1) setShowNote(false);\n  }, [xpId, showNote]);\n  /* Get window width */\n\n  const getWindowDimensions = () => window.innerWidth;\n\n  const [windowWidth, setWindowWidth] = useState(getWindowDimensions());\n  useEffect(() => {\n    const handleResize = () => setWindowWidth(getWindowDimensions());\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  /* CLOSE EXPERIENCE ON SCROLL */\n\n  window.onscroll = () => {\n    if (!showNote && xpId !== -1) setXpId(-1);\n  };\n\n  const sortedTimeline = timeline.sort((a, b) => a.start.seconds - b.start.seconds);\n  const startYear = sortedTimeline[0].start.toDate().getFullYear();\n  /* SVG PROPERTIES */\n\n  const yearHeight = 100;\n  const markingWidth = 20 + windowWidth / 200;\n  const interRowWidth = 25 + windowWidth / 25;\n  const svgHeight = markingWidth / 2 + (new Date().getFullYear() - startYear) * yearHeight + (new Date().getMonth() + 1) * (yearHeight / 12);\n  const stringSvgWidth = 50;\n  const activeExperience = timeline.find(e => e.id === xpId);\n\n  const ClickReminderNote = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeline-note disabled-highlight\",\n      style: {\n        opacity: showNote ? 1 : 0\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"black\",\n        children: \"Click on the timeline to reveal datails.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timeline\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"black\",\n      children: \"Timeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svg-container max-width-1200\",\n      onClick: () => xpId !== -1 && setXpId(-1),\n      children: [/*#__PURE__*/_jsxDEV(Decoration, {\n        windowWidth,\n        markingWidth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TimeSvg, {\n        sortedTimeline,\n        xpId,\n        setXpId,\n        interRowWidth,\n        svgHeight,\n        markingWidth,\n        yearHeight,\n        startYear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StringSvg, {\n        startYear,\n        markingWidth,\n        stringSvgWidth,\n        svgHeight,\n        yearHeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClickReminderNote, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"openExperience-visability-container\",\n      style: {\n        opacity: xpId === -1 ? 0 : 1\n      },\n      children: activeExperience && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"openExperience-container\",\n        children: /*#__PURE__*/_jsxDEV(OpenExperience, {\n          setXpId,\n          activeExperience\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Timeline, \"OAvMJ7PzjpXNBh9ivKOO3kKxCbU=\");\n\n_c = Timeline;\nexport default Timeline;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"sources":["/Users/friedebold/dev/potfolio/src/components/Timeline/index.tsx"],"names":["React","useEffect","useState","Decoration","OpenExperience","StringSvg","TimeSvg","Timeline","timeline","xpId","setXpId","showNote","setShowNote","getWindowDimensions","window","innerWidth","windowWidth","setWindowWidth","handleResize","addEventListener","removeEventListener","onscroll","sortedTimeline","sort","a","b","start","seconds","startYear","toDate","getFullYear","yearHeight","markingWidth","interRowWidth","svgHeight","Date","getMonth","stringSvgWidth","activeExperience","find","e","id","ClickReminderNote","opacity"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Experience } from \"../../apis/model\"\nimport Decoration from './Decoration'\nimport OpenExperience from './OpenExperience'\nimport StringSvg from './StringSvg'\nimport './timeline.css'\nimport TimeSvg from './TimeSvg'\n\ninterface Props {\n  timeline: Experience[]\n}\n\nconst Timeline: React.FC<Props> = ({ timeline }) => {\n\n  const [xpId, setXpId] = useState<number>(-1)\n  const [showNote, setShowNote] = useState(true)\n\n  /* DISABLE NOTE WHEN TIMELINE CLICKED */\n  useEffect(() => {\n    if (showNote && xpId !== -1) setShowNote(false)\n  }, [xpId, showNote])\n\n  /* Get window width */\n  const getWindowDimensions = () => window.innerWidth\n  const [windowWidth, setWindowWidth] = useState(getWindowDimensions())\n\n  useEffect(() => {\n    const handleResize = () => setWindowWidth(getWindowDimensions())\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [])\n\n  /* CLOSE EXPERIENCE ON SCROLL */\n  window.onscroll = () => {\n    if (!showNote && xpId !== -1) setXpId(-1)\n  }\n\n  const sortedTimeline = timeline.sort((a: Experience, b: Experience) => a.start.seconds - b.start.seconds)\n  const startYear = sortedTimeline[0].start.toDate().getFullYear()\n\n  /* SVG PROPERTIES */\n  const yearHeight = 100\n  const markingWidth = 20 + windowWidth / 200\n  const interRowWidth = 25 + windowWidth / 25\n  const svgHeight = markingWidth / 2 + ((new Date().getFullYear() - startYear) * yearHeight) + ((new Date().getMonth() + 1) * (yearHeight / 12))\n  const stringSvgWidth = 50\n\n  const activeExperience: Experience | undefined = timeline.find((e) => e.id === xpId)\n\n  const ClickReminderNote = () => {\n    return (\n      <div className='timeline-note disabled-highlight' style={{ opacity: showNote ? 1 : 0 }}>\n        <p className='black'>Click on the timeline to reveal datails.</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className='timeline'>\n      <h2 className='black'>Timeline</h2>\n\n      <div className='svg-container max-width-1200' onClick={() => xpId !== -1 && setXpId(-1)}>\n        <Decoration {...{ windowWidth }} {...{ markingWidth }} />\n        <TimeSvg {...{ sortedTimeline }} {...{ xpId }} {...{ setXpId }} {...{ interRowWidth }} {...{ svgHeight }} {...{ markingWidth }} {...{ yearHeight }} {...{ startYear }} />\n        <StringSvg {...{ startYear }} {...{ markingWidth }} {...{ stringSvgWidth }} {...{ svgHeight }} {...{ yearHeight }} />\n      </div>\n\n      <ClickReminderNote />\n\n      <div className='openExperience-visability-container' style={{ opacity: xpId === -1 ? 0 : 1 }}>\n        {\n          activeExperience &&\n          <div className='openExperience-container'>\n            <OpenExperience {...{ setXpId }} {...{ activeExperience }} />\n          </div>\n        }\n      </div>\n    </div >\n  )\n}\n\nexport default Timeline\n"]},"metadata":{},"sourceType":"module"}