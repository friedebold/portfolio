{"ast":null,"code":"var _jsxFileName = \"/Users/friedebold/dev/potfolio/src/components/Contact/ContactItem.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './contact.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactItem = ({\n  contact,\n  setViewedPage\n}) => {\n  _s();\n\n  const [savedToClipboard, setSavedToClipboard] = useState(false);\n  useEffect(() => {\n    if (savedToClipboard) {\n      setTimeout(() => {\n        setSavedToClipboard(false);\n      }, 1000);\n    }\n  }, [savedToClipboard]);\n\n  const saveToClipboard = () => {\n    navigator.clipboard.writeText(contact.title);\n    setSavedToClipboard(true);\n    setViewedPage(contact.title);\n  };\n\n  if (contact.href) {\n    return /*#__PURE__*/_jsxDEV(\"a\", {\n      className: \"list-item contact-item\",\n      onClick: () => setViewedPage(contact.title),\n      style: {\n        textDecoration: 'none'\n      },\n      target: \"none\",\n      href: contact.href,\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"contact-item-text\",\n          children: contact.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"list-item contact-item\",\n    onClick: () => saveToClipboard(),\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"contact-item-text\",\n        style: {\n          opacity: savedToClipboard ? 0.5 : 1\n        },\n        children: !savedToClipboard ? contact.title : 'copying to clipboard...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactItem, \"e3mCRNqEUACNrj3HTmwNrJ0Fik4=\");\n\n_c = ContactItem;\nexport default ContactItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactItem\");","map":{"version":3,"sources":["/Users/friedebold/dev/potfolio/src/components/Contact/ContactItem.tsx"],"names":["React","useEffect","useState","ContactItem","contact","setViewedPage","savedToClipboard","setSavedToClipboard","setTimeout","saveToClipboard","navigator","clipboard","writeText","title","href","textDecoration","opacity"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgCC,SAAhC,EAA2CC,QAA3C,QAA2D,OAA3D;AAEA,OAAO,eAAP;;;AAOA,MAAMC,WAA4B,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAgC;AAAA;;AACnE,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CL,QAAQ,CAAC,KAAD,CAAxD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,gBAAJ,EAAsB;AACpBE,MAAAA,UAAU,CAAC,MAAM;AACfD,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,OAFS,EAEP,IAFO,CAAV;AAGD;AACF,GANQ,EAMN,CAACD,gBAAD,CANM,CAAT;;AAQA,QAAMG,eAAe,GAAG,MAAM;AAC5BC,IAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BR,OAAO,CAACS,KAAtC;AACAN,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAF,IAAAA,aAAa,CAACD,OAAO,CAACS,KAAT,CAAb;AACD,GAJD;;AAMA,MAAIT,OAAO,CAACU,IAAZ,EAAkB;AAChB,wBACE;AAAG,MAAA,SAAS,EAAC,wBAAb;AAAsC,MAAA,OAAO,EAAE,MAAMT,aAAa,CAACD,OAAO,CAACS,KAAT,CAAlE;AAAmF,MAAA,KAAK,EAAE;AAAEE,QAAAA,cAAc,EAAE;AAAlB,OAA1F;AAAsH,MAAA,MAAM,EAAC,MAA7H;AAAoI,MAAA,IAAI,EAAEX,OAAO,CAACU,IAAlJ;AAAA,6BACE;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC,mBAAb;AAAA,oBAAmCV,OAAO,CAACS;AAA3C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAOD,GARD,MAQO,oBACL;AAAQ,IAAA,SAAS,EAAC,wBAAlB;AAA2C,IAAA,OAAO,EAAE,MAAMJ,eAAe,EAAzE;AAAA,2BACE;AAAA,6BACE;AAAG,QAAA,SAAS,EAAC,mBAAb;AAAiC,QAAA,KAAK,EAAE;AAAEO,UAAAA,OAAO,EAAEV,gBAAgB,GAAG,GAAH,GAAS;AAApC,SAAxC;AAAA,kBAAkF,CAACA,gBAAD,GAAoBF,OAAO,CAACS,KAA5B,GAAoC;AAAtH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADK;AAOR,CAhCD;;GAAMV,W;;KAAAA,W;AAkCN,eAAeA,WAAf","sourcesContent":["import React, { SetStateAction, useEffect, useState } from 'react';\nimport { ContactPoint } from '../../apis/model';\nimport './contact.css';\n\ninterface Props {\n  contact: ContactPoint\n  setViewedPage: React.Dispatch<SetStateAction<string>>\n}\n\nconst ContactItem: React.FC<Props> = ({ contact, setViewedPage }) => {\n  const [savedToClipboard, setSavedToClipboard] = useState(false)\n\n  useEffect(() => {\n    if (savedToClipboard) {\n      setTimeout(() => {\n        setSavedToClipboard(false)\n      }, 1000)\n    }\n  }, [savedToClipboard])\n\n  const saveToClipboard = () => {\n    navigator.clipboard.writeText(contact.title)\n    setSavedToClipboard(true)\n    setViewedPage(contact.title)\n  }\n\n  if (contact.href) {\n    return (\n      <a className='list-item contact-item' onClick={() => setViewedPage(contact.title)} style={{ textDecoration: 'none' }} target='none' href={contact.href}>\n        <li>\n          <p className='contact-item-text' >{contact.title}</p>\n        </li>\n      </a>\n    )\n  } else return (\n    <button className='list-item contact-item' onClick={() => saveToClipboard()}>\n      <li>\n        <p className='contact-item-text' style={{ opacity: savedToClipboard ? 0.5 : 1 }}>{!savedToClipboard ? contact.title : 'copying to clipboard...'}</p>\n      </li>\n    </button>\n  )\n}\n\nexport default ContactItem"]},"metadata":{},"sourceType":"module"}