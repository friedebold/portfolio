{"ast":null,"code":"var _jsxFileName = \"/Users/friedebold/dev/potfolio/src/components/Timeline/TimeSvg.tsx\";\nimport React from 'react';\nimport { generateTimeSvg } from './svgGenerator';\nimport './timeline.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TimeSvg = ({\n  sortedTimeline,\n  startYear,\n  xpId,\n  setXpId,\n  markingWidth,\n  yearHeight,\n  interRowWidth,\n  svgHeight\n}) => {\n  const {\n    nrOfRows,\n    svgModel\n  } = generateTimeSvg(sortedTimeline);\n  const svgWidth = interRowWidth * 2 * Math.floor((nrOfRows + 1) / 2) + markingWidth;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-svg-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      height: svgHeight,\n      width: svgWidth,\n      children: svgModel.map((item, index) => {\n        let xVal = Math.ceil((item.row % 2 === 0 ? -1 : 1) * item.row / 2) * interRowWidth + svgWidth / 2;\n        let isNow = item.end === (new Date().getFullYear() - startYear) * 12 + new Date().getMonth();\n        if (isNow) return /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeWidth: \"0.01\",\n          onClick: () => setXpId(item.id),\n          className: xpId === item.id ? 'xp active' : 'xp',\n          d: `\n                  M${xVal - markingWidth / 2 + markingWidth} ${yearHeight * item.start / 12 + markingWidth / 2 + markingWidth / 2}\n                  v${Math.max(0, yearHeight * (item.end - item.start) / 12 - markingWidth / 2)}\n                  h${-markingWidth}\n                  v${-Math.max(0, yearHeight * (item.end - item.start) / 12 - markingWidth / 2)}\n                  a 1 1 1 0 1 ${markingWidth} 0 z\n                  `\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 31\n        }, this);else return /*#__PURE__*/_jsxDEV(\"rect\", {\n          onClick: () => setXpId(item.id),\n          x: xVal - markingWidth / 2,\n          y: yearHeight * item.start / 12 + markingWidth / 2,\n          width: markingWidth,\n          height: Math.max(markingWidth, yearHeight * (item.end - item.start) / 12),\n          rx: markingWidth / 2,\n          className: xpId === item.id ? 'xp active' : 'xp'\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TimeSvg;\nexport default TimeSvg;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeSvg\");","map":{"version":3,"sources":["/Users/friedebold/dev/potfolio/src/components/Timeline/TimeSvg.tsx"],"names":["React","generateTimeSvg","TimeSvg","sortedTimeline","startYear","xpId","setXpId","markingWidth","yearHeight","interRowWidth","svgHeight","nrOfRows","svgModel","svgWidth","Math","floor","map","item","index","xVal","ceil","row","isNow","end","Date","getFullYear","getMonth","id","start","max"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,QAAgC,gBAAhC;AACA,OAAO,gBAAP;;;AAaA,MAAMC,OAAwB,GAAG,CAAC;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,SAAlB;AAA6BC,EAAAA,IAA7B;AAAmCC,EAAAA,OAAnC;AAA4CC,EAAAA,YAA5C;AAA0DC,EAAAA,UAA1D;AAAsEC,EAAAA,aAAtE;AAAqFC,EAAAA;AAArF,CAAD,KAAsG;AAErI,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBX,eAAe,CAACE,cAAD,CAA9C;AAEA,QAAMU,QAAQ,GAAGJ,aAAa,GAAG,CAAhB,GAAoBK,IAAI,CAACC,KAAL,CAAW,CAACJ,QAAQ,GAAG,CAAZ,IAAiB,CAA5B,CAApB,GAAqDJ,YAAtE;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,2BACE;AAAK,MAAA,MAAM,EAAEG,SAAb;AAAwB,MAAA,KAAK,EAAEG,QAA/B;AAAA,gBAEID,QAAQ,CAACI,GAAT,CAAa,CAACC,IAAD,EAAgEC,KAAhE,KAAkF;AAC7F,YAAIC,IAAI,GAAGL,IAAI,CAACM,IAAL,CAAU,CAACH,IAAI,CAACI,GAAL,GAAW,CAAX,KAAiB,CAAjB,GAAqB,CAAC,CAAtB,GAA0B,CAA3B,IAAgCJ,IAAI,CAACI,GAArC,GAA2C,CAArD,IAA0DZ,aAA1D,GAA0EI,QAAQ,GAAG,CAAhG;AACA,YAAIS,KAAK,GAAGL,IAAI,CAACM,GAAL,KAAa,CAAC,IAAIC,IAAJ,GAAWC,WAAX,KAA2BrB,SAA5B,IAAyC,EAAzC,GAA+C,IAAIoB,IAAJ,GAAWE,QAAX,EAAxE;AAEA,YAAIJ,KAAJ,EAAW,oBAAO;AAAM,UAAA,WAAW,EAAC,MAAlB;AAAyB,UAAA,OAAO,EAAE,MAAMhB,OAAO,CAACW,IAAI,CAACU,EAAN,CAA/C;AAA0D,UAAA,SAAS,EAAEtB,IAAI,KAAKY,IAAI,CAACU,EAAd,GAAmB,WAAnB,GAAiC,IAAtG;AAChB,UAAA,CAAC,EAAG;AAClB,qBAAqBR,IAAI,GAAGZ,YAAY,GAAG,CAAtB,GAA0BA,YAAa,IAAGC,UAAU,GAAGS,IAAI,CAACW,KAAlB,GAA0B,EAA1B,GAA+BrB,YAAY,GAAG,CAA9C,GAAkDA,YAAY,GAAG,CAAE;AAClI,qBAAqBO,IAAI,CAACe,GAAL,CAAS,CAAT,EAAYrB,UAAU,IAAIS,IAAI,CAACM,GAAL,GAAWN,IAAI,CAACW,KAApB,CAAV,GAAuC,EAAvC,GAA4CrB,YAAY,GAAG,CAAvE,CAA0E;AAC/F,qBAAqB,CAACA,YAAa;AACnC,qBAAqB,CAACO,IAAI,CAACe,GAAL,CAAS,CAAT,EAAYrB,UAAU,IAAIS,IAAI,CAACM,GAAL,GAAWN,IAAI,CAACW,KAApB,CAAV,GAAuC,EAAvC,GAA4CrB,YAAY,GAAG,CAAvE,CAA0E;AAChG,gCAAgCA,YAAa;AAC7C;AAP8B,WAOJW,KAPI;AAAA;AAAA;AAAA;AAAA,gBAAP,CAAX,KASK,oBAAO;AACV,UAAA,OAAO,EAAE,MAAMZ,OAAO,CAACW,IAAI,CAACU,EAAN,CADZ;AAEV,UAAA,CAAC,EAAER,IAAI,GAAGZ,YAAY,GAAG,CAFf;AAGV,UAAA,CAAC,EAAEC,UAAU,GAAGS,IAAI,CAACW,KAAlB,GAA0B,EAA1B,GAA+BrB,YAAY,GAAG,CAHvC;AAIV,UAAA,KAAK,EAAEA,YAJG;AAKV,UAAA,MAAM,EAAEO,IAAI,CAACe,GAAL,CAAStB,YAAT,EAAuBC,UAAU,IAAIS,IAAI,CAACM,GAAL,GAAWN,IAAI,CAACW,KAApB,CAAV,GAAuC,EAA9D,CALE;AAMV,UAAA,EAAE,EAAErB,YAAY,GAAG,CANT;AAMY,UAAA,SAAS,EAAEF,IAAI,KAAKY,IAAI,CAACU,EAAd,GAAmB,WAAnB,GAAiC;AANxD,WAOLT,KAPK;AAAA;AAAA;AAAA;AAAA,gBAAP;AAQN,OArBD;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CApCD;;KAAMhB,O;AAsCN,eAAeA,OAAf","sourcesContent":["import React from 'react'\nimport { Experience } from \"../../apis/model\"\nimport { generateTimeSvg } from './svgGenerator'\nimport './timeline.css'\n\ninterface Props {\n  sortedTimeline: Experience[]\n  xpId: number\n  setXpId: React.Dispatch<React.SetStateAction<number>>\n  interRowWidth: number\n  svgHeight: number\n  markingWidth: number\n  yearHeight: number\n  startYear: number\n}\n\nconst TimeSvg: React.FC<Props> = ({ sortedTimeline, startYear, xpId, setXpId, markingWidth, yearHeight, interRowWidth, svgHeight }) => {\n\n  const { nrOfRows, svgModel } = generateTimeSvg(sortedTimeline,)\n\n  const svgWidth = interRowWidth * 2 * Math.floor((nrOfRows + 1) / 2) + markingWidth\n\n  return (\n    <div className='time-svg-container'>\n      <svg height={svgHeight} width={svgWidth}>\n        {\n          svgModel.map((item: { id: number, start: number, end: number, row: number }, index: number) => {\n            let xVal = Math.ceil((item.row % 2 === 0 ? -1 : 1) * item.row / 2) * interRowWidth + svgWidth / 2\n            let isNow = item.end === (new Date().getFullYear() - startYear) * 12 + (new Date().getMonth())\n\n            if (isNow) return <path strokeWidth='0.01' onClick={() => setXpId(item.id)} className={xpId === item.id ? 'xp active' : 'xp'}\n              d={`\n                  M${xVal - markingWidth / 2 + markingWidth} ${yearHeight * item.start / 12 + markingWidth / 2 + markingWidth / 2}\n                  v${Math.max(0, yearHeight * (item.end - item.start) / 12 - markingWidth / 2)}\n                  h${-markingWidth}\n                  v${-Math.max(0, yearHeight * (item.end - item.start) / 12 - markingWidth / 2)}\n                  a 1 1 1 0 1 ${markingWidth} 0 z\n                  `} key={index} />\n\n            else return <rect\n              onClick={() => setXpId(item.id)}\n              x={xVal - markingWidth / 2}\n              y={yearHeight * item.start / 12 + markingWidth / 2}\n              width={markingWidth}\n              height={Math.max(markingWidth, yearHeight * (item.end - item.start) / 12)}\n              rx={markingWidth / 2} className={xpId === item.id ? 'xp active' : 'xp'}\n              key={index} />\n          })\n        }\n      </svg>\n    </div>\n  )\n}\n\nexport default TimeSvg\n\n"]},"metadata":{},"sourceType":"module"}